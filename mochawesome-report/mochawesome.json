{
  "stats": {
    "suites": 7,
    "tests": 42,
    "passes": 42,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-02T00:49:21.546Z",
    "end": "2020-10-02T00:49:23.852Z",
    "duration": 2306,
    "testsRegistered": 42,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "53a50981-22a1-40d8-8ada-810b12a2ac4a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "dcd0e336-17e0-4934-ba49-5e4d08fdab3c",
        "title": "Color Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/color.test.ts",
        "file": "/test/color.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "new Color(\"string\") should conver hex string to color object",
            "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a52bfb05-9f68-4ab5-b058-68d8ef99bcbd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
            "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
            "err": {},
            "isRoot": false,
            "uuid": "0b93944d-bc8e-466a-9ee2-dc29f12a2ea5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
            "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
            "err": {},
            "isRoot": false,
            "uuid": "bf812e88-f260-45ff-9866-aef669855017",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "16abb506-625e-4ac5-8a24-5365175f3049",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a52bfb05-9f68-4ab5-b058-68d8ef99bcbd",
          "0b93944d-bc8e-466a-9ee2-dc29f12a2ea5",
          "bf812e88-f260-45ff-9866-aef669855017",
          "16abb506-625e-4ac5-8a24-5365175f3049"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "bc62af33-e5e9-4a6d-a14d-f2b0d3dad2ce",
        "title": "Discover Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/discover.test.ts",
        "file": "/test/discover.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Discover Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "c710c15d-8e38-4886-a796-33a8c1694303",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Discover Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fc6c280b-59e3-46a6-855c-04c8519e2fb2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "discover() should find bulbs",
            "fullTitle": "Discover Class Test discover() should find bulbs",
            "timedOut": false,
            "duration": 204,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "865fa8f6-0ac7-4eef-b394-af61df8c5b10",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "865fa8f6-0ac7-4eef-b394-af61df8c5b10"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 204,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "53035678-ce90-4bf9-99df-206c754abac7",
        "title": "Util Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
        "file": "/test/util.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "parseDeviceInfo() should successful parse valid message",
            "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
            "err": {},
            "isRoot": false,
            "uuid": "32efe134-f7bb-485f-9367-0191dad162d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "getListIpAddress should get the arround ip address first",
            "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
            "err": {},
            "isRoot": false,
            "uuid": "dc0bcff5-31cb-40fe-9581-a4ab9a219fad",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "cd5b2984-d09d-4292-b528-ffaed9bd8e41",
            "title": "hexToNumber() test",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
            "file": "/test/util.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "numberToHex(1) should equal to 1",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "53406819-cc44-49e7-8b0b-cc2274ed9c17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(10) should equal to 16",
                "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "f8018e9d-fad8-45cc-b462-4e6963b8bd22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(14) should equal to 20",
                "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "3575129b-3bf6-44e8-9cd1-4a399dbc3ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(44) should equal to 68",
                "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "690a5eb9-2bc4-4e5e-bc4f-8e1230a27c60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A) should equal to 10",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "e4922cc0-54a3-43a5-a1f3-7a6ce16a50b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(F) should equal to 15",
                "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "23bb55e4-4ab6-4814-be6f-054e4b61df53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1A) should equal to 26",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "e074b309-484f-4dc9-8968-af9aae086728",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(FF) should equal to 255",
                "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "a08761fb-26f3-4669-bc9f-2bcf3a340f70",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(AB) should equal to 171",
                "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "be9a2967-9b6e-40a0-9c10-cded88a645ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A123BE) should equal to 10560446",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "f467223b-bbbf-4049-909d-220a61fa6c1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "4662e32c-a480-4f5d-9e72-0baa186f3713",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(ABCFED) should equal to 11259885",
                "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "d103bc8c-be66-4b5c-b29b-bbc05d3b2898",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(abccde) should equal to 11259102",
                "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "490ba984-b128-4b95-a472-4f101248a063",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "53406819-cc44-49e7-8b0b-cc2274ed9c17",
              "f8018e9d-fad8-45cc-b462-4e6963b8bd22",
              "3575129b-3bf6-44e8-9cd1-4a399dbc3ae2",
              "690a5eb9-2bc4-4e5e-bc4f-8e1230a27c60",
              "e4922cc0-54a3-43a5-a1f3-7a6ce16a50b7",
              "23bb55e4-4ab6-4814-be6f-054e4b61df53",
              "e074b309-484f-4dc9-8968-af9aae086728",
              "a08761fb-26f3-4669-bc9f-2bcf3a340f70",
              "be9a2967-9b6e-40a0-9c10-cded88a645ad",
              "f467223b-bbbf-4049-909d-220a61fa6c1f",
              "4662e32c-a480-4f5d-9e72-0baa186f3713",
              "d103bc8c-be66-4b5c-b29b-bbc05d3b2898",
              "490ba984-b128-4b95-a472-4f101248a063"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "32efe134-f7bb-485f-9367-0191dad162d8",
          "dc0bcff5-31cb-40fe-9581-a4ab9a219fad"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "e196ed6b-68ee-4c91-9d9d-be59d3cf4f95",
        "title": "Yeelight Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
        "file": "/test/yeelight.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Yeelight Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "e055a4ea-d09b-4439-a5a2-3c8b758331e7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Yeelight Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "615ec9ab-96c3-492d-bec3-8c8d0e560572",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "connect() should success",
            "fullTitle": "Yeelight Class Test connect() should success",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3313d41d-fbe8-4774-a4df-e9f6da8b16c9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "8eecd425-7147-41e4-9510-c44b3cfa5bb9",
            "title": "setName() tests",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "setName() should work when send valid message",
                "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "5d024107-0da3-47ca-97b3-fb9495ced665",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "714561ee-0ca8-4189-a1c2-dbe777b48447",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "137321ca-8150-4799-9efe-3403e6e17981",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                "timedOut": false,
                "duration": 2002,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "6d596728-0a1c-4334-9540-0624832e38c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5d024107-0da3-47ca-97b3-fb9495ced665",
              "714561ee-0ca8-4189-a1c2-dbe777b48447",
              "137321ca-8150-4799-9efe-3403e6e17981",
              "6d596728-0a1c-4334-9540-0624832e38c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2013,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "a39ed634-8533-49da-bf73-76d37f29a5ad",
            "title": "manipulator methods",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "method toggle should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "613a6b37-ce3b-4c97-8c6d-bcd07d1d2600",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronAdd should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "6894e276-1923-4ae9-858e-5b9c7a1888a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronGet should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "2a02c026-711d-452e-815a-8baad4b161e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronDelete should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "e81239fe-5c6d-4662-a407-b4047a145382",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setDefault should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "1617c1c5-69cf-4c76-ba46-29d4102127b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method startColorFlow should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "e300e564-4df9-4670-a424-a9e87badbe9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method stopColorFlow should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "9e85eb83-1310-4e22-b7eb-5576878021bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getProperty should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "0509f699-3348-45a4-aed3-e11b88de4381",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setCtAbx should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "da4c2503-1e76-460c-96bc-654b8cecd703",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setRGB should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "87b2ef32-334a-4022-9dc8-d059975fdc1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setHSV should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "18cd73df-d64f-44c5-966c-8b4512f77179",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setBright should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "3c87d284-9912-453f-8bc5-96b885aa55ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setAdjust should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "60c847de-0604-4d12-9593-0c014f09bfd7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setName should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "a407eba3-eeac-40db-848f-b87fa67e2856",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method adjust should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "88e794df-a605-46a7-8fbb-9d93453f9067",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method ping should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "d275cc20-0263-4313-a41b-e636e5039163",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setScene should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "6b73c8b3-d08e-4940-8dc9-b97dfb40949f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "613a6b37-ce3b-4c97-8c6d-bcd07d1d2600",
              "6894e276-1923-4ae9-858e-5b9c7a1888a3",
              "2a02c026-711d-452e-815a-8baad4b161e8",
              "e81239fe-5c6d-4662-a407-b4047a145382",
              "1617c1c5-69cf-4c76-ba46-29d4102127b2",
              "e300e564-4df9-4670-a424-a9e87badbe9c",
              "9e85eb83-1310-4e22-b7eb-5576878021bf",
              "0509f699-3348-45a4-aed3-e11b88de4381",
              "da4c2503-1e76-460c-96bc-654b8cecd703",
              "87b2ef32-334a-4022-9dc8-d059975fdc1b",
              "18cd73df-d64f-44c5-966c-8b4512f77179",
              "3c87d284-9912-453f-8bc5-96b885aa55ae",
              "60c847de-0604-4d12-9593-0c014f09bfd7",
              "a407eba3-eeac-40db-848f-b87fa67e2856",
              "88e794df-a605-46a7-8fbb-9d93453f9067",
              "d275cc20-0263-4313-a41b-e636e5039163",
              "6b73c8b3-d08e-4940-8dc9-b97dfb40949f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "3313d41d-fbe8-4774-a4df-e9f6da8b16c9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2020
}